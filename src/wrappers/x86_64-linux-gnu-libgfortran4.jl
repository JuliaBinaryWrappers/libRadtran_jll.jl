# Autogenerated wrapper script for libRadtran_jll for x86_64-linux-gnu-libgfortran4
export angres, cldprp, conv, integrate, libRadtran, make_angresfunc, make_slitfunction, mie, noon, phase, plkavg, pmom, read_Stamnes_tab, snowalbedo, sofi, spline, ssradar, sza2time, time2sza, uvspec, uvspec_mpi, uvspecfunction, vac2air, vrs_ocean_albedo, zenith

using CompilerSupportLibraries_jll
using GSL_jll
using NetCDF_jll
JLLWrappers.@generate_wrapper_header("libRadtran")
JLLWrappers.@declare_library_product(libRadtran, "libRadtran.so")
JLLWrappers.@declare_executable_product(angres)
JLLWrappers.@declare_executable_product(cldprp)
JLLWrappers.@declare_executable_product(conv)
JLLWrappers.@declare_executable_product(integrate)
JLLWrappers.@declare_executable_product(make_angresfunc)
JLLWrappers.@declare_executable_product(make_slitfunction)
JLLWrappers.@declare_executable_product(mie)
JLLWrappers.@declare_executable_product(noon)
JLLWrappers.@declare_executable_product(phase)
JLLWrappers.@declare_executable_product(plkavg)
JLLWrappers.@declare_executable_product(pmom)
JLLWrappers.@declare_executable_product(read_Stamnes_tab)
JLLWrappers.@declare_executable_product(snowalbedo)
JLLWrappers.@declare_executable_product(sofi)
JLLWrappers.@declare_executable_product(spline)
JLLWrappers.@declare_executable_product(ssradar)
JLLWrappers.@declare_executable_product(sza2time)
JLLWrappers.@declare_executable_product(time2sza)
JLLWrappers.@declare_executable_product(uvspec)
JLLWrappers.@declare_executable_product(uvspec_mpi)
JLLWrappers.@declare_executable_product(uvspecfunction)
JLLWrappers.@declare_executable_product(vac2air)
JLLWrappers.@declare_executable_product(vrs_ocean_albedo)
JLLWrappers.@declare_executable_product(zenith)
function __init__()
    JLLWrappers.@generate_init_header(CompilerSupportLibraries_jll, GSL_jll, NetCDF_jll)
    JLLWrappers.@init_library_product(
        libRadtran,
        "lib/libRadtran.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_executable_product(
        angres,
        "bin/angres",
    )

    JLLWrappers.@init_executable_product(
        cldprp,
        "bin/cldprp",
    )

    JLLWrappers.@init_executable_product(
        conv,
        "bin/conv",
    )

    JLLWrappers.@init_executable_product(
        integrate,
        "bin/integrate",
    )

    JLLWrappers.@init_executable_product(
        make_angresfunc,
        "bin/make_angresfunc",
    )

    JLLWrappers.@init_executable_product(
        make_slitfunction,
        "bin/make_slitfunction",
    )

    JLLWrappers.@init_executable_product(
        mie,
        "bin/mie",
    )

    JLLWrappers.@init_executable_product(
        noon,
        "bin/noon",
    )

    JLLWrappers.@init_executable_product(
        phase,
        "bin/phase",
    )

    JLLWrappers.@init_executable_product(
        plkavg,
        "bin/plkavg",
    )

    JLLWrappers.@init_executable_product(
        pmom,
        "bin/pmom",
    )

    JLLWrappers.@init_executable_product(
        read_Stamnes_tab,
        "bin/read_Stamnes_tab",
    )

    JLLWrappers.@init_executable_product(
        snowalbedo,
        "bin/snowalbedo",
    )

    JLLWrappers.@init_executable_product(
        sofi,
        "bin/sofi",
    )

    JLLWrappers.@init_executable_product(
        spline,
        "bin/spline",
    )

    JLLWrappers.@init_executable_product(
        ssradar,
        "bin/ssradar",
    )

    JLLWrappers.@init_executable_product(
        sza2time,
        "bin/sza2time",
    )

    JLLWrappers.@init_executable_product(
        time2sza,
        "bin/time2sza",
    )

    JLLWrappers.@init_executable_product(
        uvspec,
        "bin/uvspec",
    )

    JLLWrappers.@init_executable_product(
        uvspec_mpi,
        "bin/uvspec_mpi",
    )

    JLLWrappers.@init_executable_product(
        uvspecfunction,
        "bin/uvspecfunction",
    )

    JLLWrappers.@init_executable_product(
        vac2air,
        "bin/vac2air",
    )

    JLLWrappers.@init_executable_product(
        vrs_ocean_albedo,
        "bin/vrs_ocean_albedo",
    )

    JLLWrappers.@init_executable_product(
        zenith,
        "bin/zenith",
    )

    JLLWrappers.@generate_init_footer()
end  # __init__()
